#summary How to add validation to the add/edit forms

= Validate Input =

To avoid user errors validations must be carried out and a feedback to the user is required indicating the error/requirement.


= How to write Validators =

=Required Validators=

Common requirements for validation in Bungeni are:

==Validate field against db-constraints==

=== Required Field ===

A required fields must contain a value.

This is normally handled at database schema level:
{{{
reporters = rdb.Table(
   "reporters",
   metadata,
   rdb.Column( "reporter_id", rdb.Integer, rdb.ForeignKey('users.user_id'), primary_key=True ),
   rdb.Column( "initials", rdb.Unicode(4), nullable=False ),
   )
}}}

The field 'initials' will be a required field.

In the descriptor you may define a field as required, this overrides the definition in the schema:
{{{
class UserDescriptor( ModelDescriptor ):
    fields = [
        dict( name="user_id", omit=True),      
        dict( name="middle_name", label=_(u"Middle Name"), required=True),
        ]
}}}
or using the property:
{{{
class UserDescriptor( ModelDescriptor ):
    fields = [
        dict( name="birth_country", 
            property = schema.Choice( title=_(u"Country of Birth"), 
                                       source=DatabaseSource(domain.Country,
                                                            'country_name', 'country_id'),
                                       required=True )
            ),       
        ]

}}}


=== Maximum length of Input ===

If the database has a restriction e.g. VARCHAR(16) the user has to be warned if the 
input does not fit

This is handled at database schema level.

=== Check Type of Input ===

make sure that in a number field you may input only numbers 

This is handled at database schema level


=== Unique values ===

give the user a feedback if the value is already present

===Custom validations===

If we need a special validation for a certain field (e.g. an email) this can be defined at the descriptor.

{{{
class UserDescriptor( ModelDescriptor ):
    fields = [
        #dict( name="email", label=_(u"Email")),
        dict( name="email",
            property = schema.TextLine( title =_(u"Email"), 
                                        description=_(u"Email address"),
                                        constraint=check_email,
                                        required=True
                                        ),
             ),                                                                                
        dict( name="login", label=_(u"Login Name")),
        ]
}}}


The constraint check_mail is a function that returns True if the input is a valid mail address otherwise an exception will be raised whose message will be displayed to the user.

{{{
class NotAnEmailAddress(schema.ValidationError):
    """This is not a valid email address"""

def check_email( email ):
    if EMAIL_RE.match( email ) is None:
        raise NotAnEmailAddress(email)
        return False
    return True

EMAIL_RE = "([0-9a-zA-Z_&.+-]+!)*[0-9a-zA-Z_&.+-]+@(([0-9a-zA-Z]([0-9a-zA-Z-]*[0-9a-z-A-Z])?\.)+[a-zA-Z]{2,6}|([0-9]{1,3}\.){3}[0-9]{1,3})$"
}}}


==Validate one field against another==

Validations of this kind can be imlemented using invariants.

=== field A must be present if field B has value X===

example: if a MP is inactive a leave reason must be given.

=== field A must have a value in comparison to field B===

example: end date must be greater (or equal) then start date.

==Access the data of the parent to validate==

===field must be filled to constraints of the parent==

example: a sitting date must be inside the dates for a session.