#summary Use the descriptor to define your UI.

= Introduction =

A rough guide to tweak the layout of your forms.


= Add a Combo box to display data from a referenced table =

The required imports are:
{{{
from ore.alchemist.vocabulary import DatabaseSource, QuerySource
}}}


The Field with the name Province is defined in the schema as:
{{{
 rdb.Column( "province", rdb.Integer, rdb.ForeignKey('provinces.province_id') ),
}}}

to get a combobox into the UI use:


{{{
dict(name="province",
            property = schema.Choice( 
            title=_(u"Province"), 
            source=DatabaseSource(domain.Province,'province', 'province_id'), 
            required=True )
            ),
}}}

where 'province' is the row to be displayed and 'province_id' the value to be saved in the field province.

== Display Data from more than one field in the combo box ==

If the field you need is not present in your table you may add a definition to your object-relational mapper.

e.g. you want to choose full names from parliament members but in your data schema the name is stored in three different fields:
{{{

users = rdb.Table(
   "users",
   metadata,
   rdb.Column( "user_id", rdb.Integer,  primary_key=True ),
   rdb.Column( "login", rdb.Unicode(16), unique=True, nullable=True ),
   rdb.Column( "titles", rdb.Unicode(32)),
   rdb.Column( "first_name", rdb.Unicode(80), nullable=False ),
   rdb.Column( "last_name", rdb.Unicode(80), nullable=False ),
   rdb.Column( "middle_name", rdb.Unicode(80) ),
   )

}}}

In the descriptor you query the attribute 'fullname' from the mapped object:
{{{
class GroupMembershipDescriptor( ModelDescriptor ):

   fields = [       
        dict( name="user_id",
            property=schema.Choice( title=_(u"Member of Parliament"),
                                    source=DatabaseSource(domain.ParliamentMember, 
                                                          'fullname', 'user_id'))
            ),     
        ]
}}}

The attribute 'fullname' is defined in orm.py as an additional property of ParliamentMember:

{{{
mapper( domain.ParliamentMember, 
        inherits=domain.User,
          properties={
           'fullname' : column_property(
                             (schema.users.c.first_name + " " + 
                             schema.users.c.middle_name + " " + 
                             schema.users.c.last_name).label('fullname')
                                           )
                    },
        polymorphic_identity='memberofparliament'
      )
}}}

_Note that if  one of the fields has a NULL value the user_id will be returned instead!_

QuerySource gives you a more control over the data being retrieved based on your current object. You have to pass additional parameters for the filter (sqlalchemist filter(), SQL: WHERE clause) and ordering (sqlalchemist order_by(), SQL: ORDER BY clause).
Therefore your domain model *must* not have a filter or order defined!

{{{
# object that will get passed to QuerySource
class mps_sitting( object ):
    """ returns the mps for a sitting """

# _mp_sitting defines our query that joins the tables together
# DO NOT define any filters only joins here!    
_mp_sitting = rdb.join(schema.sittings, schema.parliament_sessions,
                        schema.sittings.c.session_id == schema.parliament_sessions.c.session_id).join(
                            schema.user_group_memberships,
                            schema.parliament_sessions.c.parliament_id == schema.user_group_memberships.c.group_id).join(
                                schema.users,
                                schema.user_group_memberships.c.user_id == schema.users.c.user_id)

# set up object relational mapping
mapper( mps_sitting, _mp_sitting,
          properties={
           'fullname' : column_property(
                             (schema.users.c.first_name + u" " + 
                             schema.users.c.middle_name + u" " + 
                             schema.users.c.last_name).label('fullname')
                                           )
                    },)
}}}

Add the your query to the descriptor.
#token_field is the field you want to display to the user (in this case the full name of the parliament member)
#value_field is the value you want to save as the fields value
#filter_field is the name of the field in your query you want to filter by
#filter_value is the name of the field in your object, the filter will be base on it's value
#order_by_field is the name of the field in your query you want to order by
#title_field is the name of the field ... in your query

{{{
class AttendanceDescriptor( ModelDescriptor ):
    display_name =_(u"Sitting Attendance")
    membersVocab = QuerySource(vocabulary.mps_sitting, 
                                          token_field='fullname', 
                                          value_field='user_id', 
                                          filter_field='sitting_id', 
                                          filter_value='sitting_id', 
                                          order_by_field='last_name',
                                          title_field='fullname' )                                    
    fields = [
        dict( name="sitting_id", omit=True ),
        dict( name="member_id", listing=True,
                property = schema.Choice(title=_(u"Attendance"), source=membersVocab, ),
               ),       
        ]
}}}



==Add a column with data from a referenced table to the container listing==

==Access data of the parent object==

==Display data of parent object in the (view/edit) form==

