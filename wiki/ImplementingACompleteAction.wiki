#labels BungeniEditorClient
= 1 - Define a toolbar action in toolbar.xml =

== Adding a blockAction == 

Add a block action for the action.  A complete block action is illustrated below.

Example:
{{{

    <blockAction name="QA" tooltip="Create a QA Section" title="Papers" 
    	target="null" 
    	visible="true" 
    	condition="none" >
    	
        <action name="QA.selection" 
		title="From Selection" 
		mode="TEXT_SELECTED_INSERT" 
		target="toolbarSubAction.makeQA.section_creation" 
		condition="sectionNotExists:qa :and: textSelected:true" 
		visible="true" showChildren="true" >
		
                    <subaction name="QA.selection.title" 
				tooltip="Markup selection as title" 
				title="Markup Title" 
				mode="TEXT_SELECTED_INSERT" 
				target="toolbarSubAction.makeQASection.apply_style:qa" 
				visible="true" 
				condition="cursorInSection:qa :and: textSelected:true" />
				
                 </action>
    </blockAction>
}}}

The blockAction element is described here. 

{{{

    <blockAction name="QA" tooltip="Create a QA Section" title="Papers" 
    	target="null" 
    	visible="true" 
    	condition="none" >
}}}
`name` - the name attribute

`tooltip` - the tooltip text to display when mousing over the block action in the toolbar

`title` - the title text displayed in the toolbar

`visible` - true / false to display / hide the element

`target` - the address of the handler that is invoked upon clicking the toolbar item. Use _null_  - to indicate no action.

`condition` - conditions under which the action is displayed. For condition syntax see: [http://code.google.com/p/bungeni-portal/wiki/ConditionProcessorsInBungeniEditor Condition Processors]

== Adding a Action element == 

blockActions can contain <action> elements.

The action element is described here.

{{{
   <action name="QA.selection" 
		title="From Selection" 
		mode="TEXT_SELECTED_INSERT" 
		target="toolbarSubAction.makeQA.section_creation" 
		condition="sectionNotExists:qa :and: textSelected:true" 
		visible="true" showChildren="true" >
}}}

`name` - the name of the action element

`title` - the title text displayed in the toolbar for the action

`mode` - applicable modes for this action. For modes and their description, see BungeniEditorModes

`target` - same as blockAction. in the example below, the target is :
{{{
target="toolbarSubAction.makeQA.section_creation"
}}}

The target syntax is a combination of "action_type.parent_action_name.sub_action_name" , out of these action_type can either be toolbarAction or toolbarSubAction, the other two values correspond to parent action, and sub action entries for the  target in the SUB_ACTION_SETTINGS table.

                                                                                                                                                                                 (There are 2 kinds of target actions possible, those that are defined in 'ACTION_SETTINGS' in the BungeniEditorSettingsDatabase and those that are defined in 'SUB_ACTION_SETTINGS'. 
For differences between the two action types see BungeniEditorActionTypes).



`showChildren`  - true / false enables/disables dispaly of child actions



== Adding a subAction element == 

<action> elements can contain <subAction> elements.
The subAction element is described here:

{{{
<subaction name="QA.selection.title" 
	tooltip="Markup selection as title" 
	title="Markup Title" 
	mode="TEXT_SELECTED_INSERT" 
	target="toolbarSubAction.makeQASection.apply_style:qa" 
	visible="true" 
	condition="cursorInSection:qa :and: textSelected:true" />
}}}

The attributes function exactly as described for the <action> element

= 2. Calling a router action in response to a toolbar action =

Typically router actions, act on the document without requesting user interaction.
The router action is defined for the subAction in the ROUTER_CLASS column for the subAction in the 'SUB_ACTION_SETTINGS' table.
For information on how to write a router action, see HowToWriteARouterAction.

= 3. Invoking dialogs in response to a toolbar action =

Clicking a toolbar action, can invoke  dialog that interacts with the currently selected openoffice document. This dialog needs to extend the `selectorTemplatePanel` class and implement the `IBungeniForm` interface:

{{{
public  class InitPapers extends selectorTemplatePanel implements IBungeniForm {
.......
}
}}}

== Connecting the dialog class to the toolbar action == 

The dialog class is invoked via standard interface by the bungeni editor. The above class for example needs to be specified in the `DIALOG_CLASS` column in the appropriate entry for the subAction in SUB_ACTION_SETTINGS table.