#summary Registry / Audit trail working document & guidelines
=Registry / Audit Trail Working Document=


==Purpose of Registry / Audit Trail==

  * To provide a relational view of Plone Content types.
  * The relational view must be consistent with the current state of the plone objects mapped to the registry table
  * The relational view must also be consistent with the the historical state of the plone object mapped to the registry table
  * To record change of state and transitions of a plone object in a uniform manner
  * To record the registry information in a relational database readable by external systems (like Openoffice, the xml repository etc...) using standard database drivers
  

==How it Works==

  * An action taking place on a plone object is output into a plain text log file in the RFC822 format.
  * This log file is read periodically by a parsing script that reads the RFC822 data, record by record, parses it, does some basic checks on it, and pumps it into a relational database.
  * Plone content types are mapped to a relational table, and this mapping is done via a configuration file.
  * Similarly Plone content attributes are mapped to table columns via a configuration file.
  * The frequency with which the script reads the audit log can be adjusted to reduce the lag between content published in plone, and content appearing in the registry.

==Consistency==

  * Plone is the authoritative generator of content in the system. Documents, Objects, Actors are constructed and modified within it.
  * The registry built of the audit trail is a mirror of this consistency i.e.if plone is inconsistent, the registry would be inconsistent.
  * Plone and the registry operate in a disconnected manner - Plone writes to an audit log, the registry is built and update by a different program that reads this audit log.
    * If the Plone server were to crash for whatever reason, the registry data would still be available to systems relying on portal data (like openoffice and the xml repository...)
    * If the registry to were to crash, plone would keep updating the audit log, when the registry system restarts it would read the audit log from where it last stopped and proceed to update itself.

==Synchronization==

  * The plone object and the corresponding registry entry for that plone object need to be kept in a synchronized state.
    * For example, If an MP is added in Plone, this MP must be recorded in the audit trail log file. If the state of the MP changes (if his name was changed, or if his role was changed ) - the change of state must be recorded as clearly identifiable states for a document.
  * Some actions are initiated directly upon a plone document, for instance - a user can select multiple documents in a folder and publish them (without actually opening the document).  Such actions must be recorded in the audit log in a predictable manner. *TO BE IDENTIFIED - OTHER SUCH ACTIONS*


==Guidelines==

  * Audit log must record in a predictable manner changes made to certain plone objects
  * Plone objects relevant to registry must be recorded in the audit log *PARTIALLY IDENTIFIED*
  * Certain field (plone attribute) names (like identifier of MP) must be standardized across forms *TO BE IDENTIFIED*
  * Specific actions for a plone object need to be recorded in the audit trail ("create", "update", "delete" and so on *TO BE IDENTIFIED*...)
  * *HOW DOES PLONE HANDLE VERSIONS OF A PLONE OBJECT - DO THEY GET A NEW UID ??? *
  * Right now the audit log outputs into a single file - ideally it should output into an hourly / or half hourly file - with a time stamped name of the type YYYYMMDD-HH-MM.TXT *TO BE DONE*
    * This is particularly relevant as the log parser needs to incrementally read the audit log file.